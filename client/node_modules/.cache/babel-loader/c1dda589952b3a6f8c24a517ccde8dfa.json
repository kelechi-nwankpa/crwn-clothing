{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { SignInFailure, SignInSuccess, signOutSuccess, signOutFailure //signUpStart,\n, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../components/firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      console.log('I didnt get any user logged in user from firebase');\n    }\n\n    ;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    console.log(email);\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password); //const value = ([user, displayName])\n\n    const userRef1 = yield call(createUserProfileDocument, user, displayName);\n    const userRef2 = yield userRef1;\n    const userSnapshot = yield userRef2.get();\n    yield put(signUpSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["C:/Users/Patrick Iwara/Desktop/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","SignInFailure","SignInSuccess","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","console","log","signOut","signUp","displayName","createUserWithEmailAndPassword","userRef1","userRef2","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\nimport { \r\n    SignInFailure, \r\n    SignInSuccess, \r\n    signOutSuccess,\r\n    signOutFailure,\r\n    //signUpStart,\r\n    signUpSuccess,\r\n    signUpFailure\r\n    } from './user.actions'\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../components/firebase/firebase.utils';\r\n\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(SignInSuccess({ \r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }))\r\n     } catch(error) {\r\n         yield put(SignInFailure(error))\r\n     }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n       const {user} = yield auth.signInWithPopup(googleProvider);\r\n       yield getSnapshotFromUserAuth(user);\r\n    } catch(error) {\r\n        yield put(SignInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password }}) {\r\n    try {\r\n      const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n      yield getSnapshotFromUserAuth(user)\r\n    } catch(error) {\r\n        yield put(SignInFailure(error))\r\n    }\r\n}\r\n\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n       const userAuth = yield getCurrentUser();\r\n       if (!userAuth) {\r\n        console.log('I didnt get any user logged in user from firebase')\r\n       };\r\n       yield getSnapshotFromUserAuth(userAuth);\r\n    } catch(error) {\r\n        yield put(SignInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signOut() {\r\n    try{\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess())\r\n    } catch(error){\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function* signUp({ payload: { email, password, displayName }}) {\r\n    try {\r\n        console.log(email)\r\n        const { user } = yield auth.createUserWithEmailAndPassword( email, password);\r\n        //const value = ([user, displayName])\r\n        const userRef1 =yield call(createUserProfileDocument, user, displayName );\r\n        const userRef2 = yield (userRef1);\r\n        const userSnapshot = yield userRef2.get();\r\n        yield put(signUpSuccess({ \r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }))\r\n    } catch(error) {\r\n        yield put(signUpFailure(error))\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle )\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n \r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut )\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp )\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([call(onGoogleSignInStart), \r\n              call(onEmailSignInStart), \r\n              call(isUserAuthenticated),\r\n              call(onSignOutStart),\r\n              call(onSignUpStart)\r\n        ]);}"]},"metadata":{},"sourceType":"module"}